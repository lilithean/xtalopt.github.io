namespace XtalOpt {
/**

@page install-win Installation for Windows

We encourage users to download and use XtalOpt pre-compiled from <a href="https://xtalopt.github.io/download.html">here</a>. In fact, this guide does not provide a complete set of instructions for compiling it on Windows. However, you may continue reading if you wish to attempt compile XtalOpt on your own.

@section depend Dependencies

First and foremost, a C++ compiler with C++11 is required to compile XtalOpt. MSVC >=2015 will work. One important point to remember when compiling for Windows is that you must use the same compiler for every dependency. So if MSVC 2017 64-bit Release is to be used for XtalOpt, all of the dependencies must be compiled with MSVC 2017 64-bit Release.

Similar to the compilations for the other operating systems, the following dependencies are required:

  - \c git, any version
  - \c cmake (and optionally the ncurses GUI, ccmake) >= 3.0
  - \c Qt >= 5.2.1
  - \c Qwt >= 6.1.3 (compiled with Qt5)
  - \c Eigen >= 3

If you wish to enable SSH (default), you will also need:

  - <tt>openssh</tt>, any version
  - <tt>libssh</tt>, any version

For git and cmake, only the executables are used, so you may download them from their respective websites.

For Qt, you may either download pre-compiled binaries for your specific compiler or compile it yourself. Qt typically has compiled versions for just about every compiler, so if you choose to download it, be sure to pick the compiled version that matches your compiler.

Eigen is a header-only library, so it does not need to be compiled separately.

OpenSSH, LibSSH, and Qwt need to all be compiled with your compiler of choice. If you wish to use MSVC 2015 (32-bit) or MSVC 2017 (64-bit), pre-compiled binaries here. Note that LibSSH has OpenSSH statically compiled within it in these binaries.

You may also compile OpenSSH, LibSSH, and Qwt on your own, but we do not provide instructions for that. You must use their instructions to do so.

@section xtalopt XtalOpt

Once you have compiled all of the binaries, you need to run cmake with the locations of all of the dependencies defined. An example of this for MSVC can be found in the batch file in  <a href="https://github.com/xtalopt/XtalOpt/blob/master/scripts/cmake-msvc2015.bat">scripts/cmake-msvc2015.bat</a> file in the XtalOpt repository. Afterwards, you must run "make" (or "nmake" in the case of MSVC) in the build directory. If the cmake option "-DBUILD_INDEPENDENT_PACKAGE" was used, a "make install" (or "nmake install" in the case of MSVC) will install XtalOpt and all of its dependencies into your cmake install directory.

@section test Test the installation

If the compilation was successful, the installed xtalopt.exe executable may be ran. It will only run successfully if all of the .dll dependencies are found, though, so you may need to manually find and place all of the .dll dependencies into the directory with XtalOpt.

*/

}
